// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service order API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service order API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CancelOrder cancel order API
*/
func (a *Client) CancelOrder(params *CancelOrderParams) (*CancelOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CancelOrder",
		Method:             "GET",
		PathPattern:        "/_v1/cancel_order/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CancelOrderOK), nil

}

/*
CreateContract create contract API
*/
func (a *Client) CreateContract(params *CreateContractParams) (*CreateContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateContract",
		Method:             "POST",
		PathPattern:        "/_v1/create_contract",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateContractOK), nil

}

/*
CreateOrder create order API
*/
func (a *Client) CreateOrder(params *CreateOrderParams) (*CreateOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateOrder",
		Method:             "POST",
		PathPattern:        "/_v1/create_order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateOrderOK), nil

}

/*
GetContract get contract API
*/
func (a *Client) GetContract(params *GetContractParams) (*GetContractOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContract",
		Method:             "GET",
		PathPattern:        "/_v1/get_contract/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContractReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractOK), nil

}

/*
GetContracts get contracts API
*/
func (a *Client) GetContracts(params *GetContractsParams) (*GetContractsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContractsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetContracts",
		Method:             "GET",
		PathPattern:        "/_v1/get_contracts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContractsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetContractsOK), nil

}

/*
GetOrder get order API
*/
func (a *Client) GetOrder(params *GetOrderParams) (*GetOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrder",
		Method:             "GET",
		PathPattern:        "/v1/get_order/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrderOK), nil

}

/*
GetOrders get orders API
*/
func (a *Client) GetOrders(params *GetOrdersParams) (*GetOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetOrders",
		Method:             "GET",
		PathPattern:        "/v1/get_orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrdersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
