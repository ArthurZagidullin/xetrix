// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetContractsParams creates a new GetContractsParams object
// with the default values initialized.
func NewGetContractsParams() *GetContractsParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &GetContractsParams{
		StatusStatus: &statusStatusDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContractsParamsWithTimeout creates a new GetContractsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContractsParamsWithTimeout(timeout time.Duration) *GetContractsParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &GetContractsParams{
		StatusStatus: &statusStatusDefault,

		timeout: timeout,
	}
}

// NewGetContractsParamsWithContext creates a new GetContractsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContractsParamsWithContext(ctx context.Context) *GetContractsParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &GetContractsParams{
		StatusStatus: &statusStatusDefault,

		Context: ctx,
	}
}

// NewGetContractsParamsWithHTTPClient creates a new GetContractsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContractsParamsWithHTTPClient(client *http.Client) *GetContractsParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &GetContractsParams{
		StatusStatus: &statusStatusDefault,
		HTTPClient:   client,
	}
}

/*GetContractsParams contains all the parameters to send to the API endpoint
for the get contracts operation typically these are written to a http.Request
*/
type GetContractsParams struct {

	/*Active*/
	Active *bool
	/*BuyCurrencySymbol*/
	BuyCurrencySymbol *string
	/*BuyerID*/
	BuyerID *string
	/*BuyerReceiveAddress*/
	BuyerReceiveAddress *string
	/*BuyerSendAddress*/
	BuyerSendAddress *string
	/*ID*/
	ID *string
	/*OrderID*/
	OrderID *string
	/*ParticipantID*/
	ParticipantID *string
	/*SellCurrencySymbol*/
	SellCurrencySymbol *string
	/*SellerID*/
	SellerID *string
	/*SellerReceiveAddress*/
	SellerReceiveAddress *string
	/*SellerSendAddress*/
	SellerSendAddress *string
	/*StatusCreatedAt*/
	StatusCreatedAt *string
	/*StatusStatus*/
	StatusStatus *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get contracts params
func (o *GetContractsParams) WithTimeout(timeout time.Duration) *GetContractsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get contracts params
func (o *GetContractsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get contracts params
func (o *GetContractsParams) WithContext(ctx context.Context) *GetContractsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get contracts params
func (o *GetContractsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get contracts params
func (o *GetContractsParams) WithHTTPClient(client *http.Client) *GetContractsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get contracts params
func (o *GetContractsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the get contracts params
func (o *GetContractsParams) WithActive(active *bool) *GetContractsParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the get contracts params
func (o *GetContractsParams) SetActive(active *bool) {
	o.Active = active
}

// WithBuyCurrencySymbol adds the buyCurrencySymbol to the get contracts params
func (o *GetContractsParams) WithBuyCurrencySymbol(buyCurrencySymbol *string) *GetContractsParams {
	o.SetBuyCurrencySymbol(buyCurrencySymbol)
	return o
}

// SetBuyCurrencySymbol adds the buyCurrencySymbol to the get contracts params
func (o *GetContractsParams) SetBuyCurrencySymbol(buyCurrencySymbol *string) {
	o.BuyCurrencySymbol = buyCurrencySymbol
}

// WithBuyerID adds the buyerID to the get contracts params
func (o *GetContractsParams) WithBuyerID(buyerID *string) *GetContractsParams {
	o.SetBuyerID(buyerID)
	return o
}

// SetBuyerID adds the buyerId to the get contracts params
func (o *GetContractsParams) SetBuyerID(buyerID *string) {
	o.BuyerID = buyerID
}

// WithBuyerReceiveAddress adds the buyerReceiveAddress to the get contracts params
func (o *GetContractsParams) WithBuyerReceiveAddress(buyerReceiveAddress *string) *GetContractsParams {
	o.SetBuyerReceiveAddress(buyerReceiveAddress)
	return o
}

// SetBuyerReceiveAddress adds the buyerReceiveAddress to the get contracts params
func (o *GetContractsParams) SetBuyerReceiveAddress(buyerReceiveAddress *string) {
	o.BuyerReceiveAddress = buyerReceiveAddress
}

// WithBuyerSendAddress adds the buyerSendAddress to the get contracts params
func (o *GetContractsParams) WithBuyerSendAddress(buyerSendAddress *string) *GetContractsParams {
	o.SetBuyerSendAddress(buyerSendAddress)
	return o
}

// SetBuyerSendAddress adds the buyerSendAddress to the get contracts params
func (o *GetContractsParams) SetBuyerSendAddress(buyerSendAddress *string) {
	o.BuyerSendAddress = buyerSendAddress
}

// WithID adds the id to the get contracts params
func (o *GetContractsParams) WithID(id *string) *GetContractsParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get contracts params
func (o *GetContractsParams) SetID(id *string) {
	o.ID = id
}

// WithOrderID adds the orderID to the get contracts params
func (o *GetContractsParams) WithOrderID(orderID *string) *GetContractsParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the get contracts params
func (o *GetContractsParams) SetOrderID(orderID *string) {
	o.OrderID = orderID
}

// WithParticipantID adds the participantID to the get contracts params
func (o *GetContractsParams) WithParticipantID(participantID *string) *GetContractsParams {
	o.SetParticipantID(participantID)
	return o
}

// SetParticipantID adds the participantId to the get contracts params
func (o *GetContractsParams) SetParticipantID(participantID *string) {
	o.ParticipantID = participantID
}

// WithSellCurrencySymbol adds the sellCurrencySymbol to the get contracts params
func (o *GetContractsParams) WithSellCurrencySymbol(sellCurrencySymbol *string) *GetContractsParams {
	o.SetSellCurrencySymbol(sellCurrencySymbol)
	return o
}

// SetSellCurrencySymbol adds the sellCurrencySymbol to the get contracts params
func (o *GetContractsParams) SetSellCurrencySymbol(sellCurrencySymbol *string) {
	o.SellCurrencySymbol = sellCurrencySymbol
}

// WithSellerID adds the sellerID to the get contracts params
func (o *GetContractsParams) WithSellerID(sellerID *string) *GetContractsParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the get contracts params
func (o *GetContractsParams) SetSellerID(sellerID *string) {
	o.SellerID = sellerID
}

// WithSellerReceiveAddress adds the sellerReceiveAddress to the get contracts params
func (o *GetContractsParams) WithSellerReceiveAddress(sellerReceiveAddress *string) *GetContractsParams {
	o.SetSellerReceiveAddress(sellerReceiveAddress)
	return o
}

// SetSellerReceiveAddress adds the sellerReceiveAddress to the get contracts params
func (o *GetContractsParams) SetSellerReceiveAddress(sellerReceiveAddress *string) {
	o.SellerReceiveAddress = sellerReceiveAddress
}

// WithSellerSendAddress adds the sellerSendAddress to the get contracts params
func (o *GetContractsParams) WithSellerSendAddress(sellerSendAddress *string) *GetContractsParams {
	o.SetSellerSendAddress(sellerSendAddress)
	return o
}

// SetSellerSendAddress adds the sellerSendAddress to the get contracts params
func (o *GetContractsParams) SetSellerSendAddress(sellerSendAddress *string) {
	o.SellerSendAddress = sellerSendAddress
}

// WithStatusCreatedAt adds the statusCreatedAt to the get contracts params
func (o *GetContractsParams) WithStatusCreatedAt(statusCreatedAt *string) *GetContractsParams {
	o.SetStatusCreatedAt(statusCreatedAt)
	return o
}

// SetStatusCreatedAt adds the statusCreatedAt to the get contracts params
func (o *GetContractsParams) SetStatusCreatedAt(statusCreatedAt *string) {
	o.StatusCreatedAt = statusCreatedAt
}

// WithStatusStatus adds the statusStatus to the get contracts params
func (o *GetContractsParams) WithStatusStatus(statusStatus *string) *GetContractsParams {
	o.SetStatusStatus(statusStatus)
	return o
}

// SetStatusStatus adds the statusStatus to the get contracts params
func (o *GetContractsParams) SetStatusStatus(statusStatus *string) {
	o.StatusStatus = statusStatus
}

// WriteToRequest writes these params to a swagger request
func (o *GetContractsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool
		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {
			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}

	}

	if o.BuyCurrencySymbol != nil {

		// query param buyCurrencySymbol
		var qrBuyCurrencySymbol string
		if o.BuyCurrencySymbol != nil {
			qrBuyCurrencySymbol = *o.BuyCurrencySymbol
		}
		qBuyCurrencySymbol := qrBuyCurrencySymbol
		if qBuyCurrencySymbol != "" {
			if err := r.SetQueryParam("buyCurrencySymbol", qBuyCurrencySymbol); err != nil {
				return err
			}
		}

	}

	if o.BuyerID != nil {

		// query param buyerId
		var qrBuyerID string
		if o.BuyerID != nil {
			qrBuyerID = *o.BuyerID
		}
		qBuyerID := qrBuyerID
		if qBuyerID != "" {
			if err := r.SetQueryParam("buyerId", qBuyerID); err != nil {
				return err
			}
		}

	}

	if o.BuyerReceiveAddress != nil {

		// query param buyerReceiveAddress
		var qrBuyerReceiveAddress string
		if o.BuyerReceiveAddress != nil {
			qrBuyerReceiveAddress = *o.BuyerReceiveAddress
		}
		qBuyerReceiveAddress := qrBuyerReceiveAddress
		if qBuyerReceiveAddress != "" {
			if err := r.SetQueryParam("buyerReceiveAddress", qBuyerReceiveAddress); err != nil {
				return err
			}
		}

	}

	if o.BuyerSendAddress != nil {

		// query param buyerSendAddress
		var qrBuyerSendAddress string
		if o.BuyerSendAddress != nil {
			qrBuyerSendAddress = *o.BuyerSendAddress
		}
		qBuyerSendAddress := qrBuyerSendAddress
		if qBuyerSendAddress != "" {
			if err := r.SetQueryParam("buyerSendAddress", qBuyerSendAddress); err != nil {
				return err
			}
		}

	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.OrderID != nil {

		// query param orderId
		var qrOrderID string
		if o.OrderID != nil {
			qrOrderID = *o.OrderID
		}
		qOrderID := qrOrderID
		if qOrderID != "" {
			if err := r.SetQueryParam("orderId", qOrderID); err != nil {
				return err
			}
		}

	}

	if o.ParticipantID != nil {

		// query param participantId
		var qrParticipantID string
		if o.ParticipantID != nil {
			qrParticipantID = *o.ParticipantID
		}
		qParticipantID := qrParticipantID
		if qParticipantID != "" {
			if err := r.SetQueryParam("participantId", qParticipantID); err != nil {
				return err
			}
		}

	}

	if o.SellCurrencySymbol != nil {

		// query param sellCurrencySymbol
		var qrSellCurrencySymbol string
		if o.SellCurrencySymbol != nil {
			qrSellCurrencySymbol = *o.SellCurrencySymbol
		}
		qSellCurrencySymbol := qrSellCurrencySymbol
		if qSellCurrencySymbol != "" {
			if err := r.SetQueryParam("sellCurrencySymbol", qSellCurrencySymbol); err != nil {
				return err
			}
		}

	}

	if o.SellerID != nil {

		// query param sellerId
		var qrSellerID string
		if o.SellerID != nil {
			qrSellerID = *o.SellerID
		}
		qSellerID := qrSellerID
		if qSellerID != "" {
			if err := r.SetQueryParam("sellerId", qSellerID); err != nil {
				return err
			}
		}

	}

	if o.SellerReceiveAddress != nil {

		// query param sellerReceiveAddress
		var qrSellerReceiveAddress string
		if o.SellerReceiveAddress != nil {
			qrSellerReceiveAddress = *o.SellerReceiveAddress
		}
		qSellerReceiveAddress := qrSellerReceiveAddress
		if qSellerReceiveAddress != "" {
			if err := r.SetQueryParam("sellerReceiveAddress", qSellerReceiveAddress); err != nil {
				return err
			}
		}

	}

	if o.SellerSendAddress != nil {

		// query param sellerSendAddress
		var qrSellerSendAddress string
		if o.SellerSendAddress != nil {
			qrSellerSendAddress = *o.SellerSendAddress
		}
		qSellerSendAddress := qrSellerSendAddress
		if qSellerSendAddress != "" {
			if err := r.SetQueryParam("sellerSendAddress", qSellerSendAddress); err != nil {
				return err
			}
		}

	}

	if o.StatusCreatedAt != nil {

		// query param status.createdAt
		var qrStatusCreatedAt string
		if o.StatusCreatedAt != nil {
			qrStatusCreatedAt = *o.StatusCreatedAt
		}
		qStatusCreatedAt := qrStatusCreatedAt
		if qStatusCreatedAt != "" {
			if err := r.SetQueryParam("status.createdAt", qStatusCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.StatusStatus != nil {

		// query param status.status
		var qrStatusStatus string
		if o.StatusStatus != nil {
			qrStatusStatus = *o.StatusStatus
		}
		qStatusStatus := qrStatusStatus
		if qStatusStatus != "" {
			if err := r.SetQueryParam("status.status", qStatusStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
