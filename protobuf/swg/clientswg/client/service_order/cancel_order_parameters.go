// Code generated by go-swagger; DO NOT EDIT.

package service_order

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCancelOrderParams creates a new CancelOrderParams object
// with the default values initialized.
func NewCancelOrderParams() *CancelOrderParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &CancelOrderParams{
		StatusStatus: &statusStatusDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCancelOrderParamsWithTimeout creates a new CancelOrderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCancelOrderParamsWithTimeout(timeout time.Duration) *CancelOrderParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &CancelOrderParams{
		StatusStatus: &statusStatusDefault,

		timeout: timeout,
	}
}

// NewCancelOrderParamsWithContext creates a new CancelOrderParams object
// with the default values initialized, and the ability to set a context for a request
func NewCancelOrderParamsWithContext(ctx context.Context) *CancelOrderParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &CancelOrderParams{
		StatusStatus: &statusStatusDefault,

		Context: ctx,
	}
}

// NewCancelOrderParamsWithHTTPClient creates a new CancelOrderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCancelOrderParamsWithHTTPClient(client *http.Client) *CancelOrderParams {
	var (
		statusStatusDefault = string("CREATED")
	)
	return &CancelOrderParams{
		StatusStatus: &statusStatusDefault,
		HTTPClient:   client,
	}
}

/*CancelOrderParams contains all the parameters to send to the API endpoint
for the cancel order operation typically these are written to a http.Request
*/
type CancelOrderParams struct {

	/*Active*/
	Active *bool
	/*Amount*/
	Amount *float64
	/*Available*/
	Available *float64
	/*BuyCurrencySymbol*/
	BuyCurrencySymbol *string
	/*Commission*/
	Commission *float64
	/*FrontMetaDataUserName*/
	FrontMetaDataUserName *string
	/*FrontMetaDataUserPriceInput*/
	FrontMetaDataUserPriceInput *string
	/*ID*/
	ID string
	/*OwnerID*/
	OwnerID *string
	/*Price*/
	Price *float64
	/*ReceiveAddress*/
	ReceiveAddress *string
	/*SellCurrencySymbol*/
	SellCurrencySymbol *string
	/*SendingAddress*/
	SendingAddress *string
	/*StatusCreatedAt*/
	StatusCreatedAt *string
	/*StatusStatus*/
	StatusStatus *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the cancel order params
func (o *CancelOrderParams) WithTimeout(timeout time.Duration) *CancelOrderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cancel order params
func (o *CancelOrderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cancel order params
func (o *CancelOrderParams) WithContext(ctx context.Context) *CancelOrderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cancel order params
func (o *CancelOrderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cancel order params
func (o *CancelOrderParams) WithHTTPClient(client *http.Client) *CancelOrderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cancel order params
func (o *CancelOrderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActive adds the active to the cancel order params
func (o *CancelOrderParams) WithActive(active *bool) *CancelOrderParams {
	o.SetActive(active)
	return o
}

// SetActive adds the active to the cancel order params
func (o *CancelOrderParams) SetActive(active *bool) {
	o.Active = active
}

// WithAmount adds the amount to the cancel order params
func (o *CancelOrderParams) WithAmount(amount *float64) *CancelOrderParams {
	o.SetAmount(amount)
	return o
}

// SetAmount adds the amount to the cancel order params
func (o *CancelOrderParams) SetAmount(amount *float64) {
	o.Amount = amount
}

// WithAvailable adds the available to the cancel order params
func (o *CancelOrderParams) WithAvailable(available *float64) *CancelOrderParams {
	o.SetAvailable(available)
	return o
}

// SetAvailable adds the available to the cancel order params
func (o *CancelOrderParams) SetAvailable(available *float64) {
	o.Available = available
}

// WithBuyCurrencySymbol adds the buyCurrencySymbol to the cancel order params
func (o *CancelOrderParams) WithBuyCurrencySymbol(buyCurrencySymbol *string) *CancelOrderParams {
	o.SetBuyCurrencySymbol(buyCurrencySymbol)
	return o
}

// SetBuyCurrencySymbol adds the buyCurrencySymbol to the cancel order params
func (o *CancelOrderParams) SetBuyCurrencySymbol(buyCurrencySymbol *string) {
	o.BuyCurrencySymbol = buyCurrencySymbol
}

// WithCommission adds the commission to the cancel order params
func (o *CancelOrderParams) WithCommission(commission *float64) *CancelOrderParams {
	o.SetCommission(commission)
	return o
}

// SetCommission adds the commission to the cancel order params
func (o *CancelOrderParams) SetCommission(commission *float64) {
	o.Commission = commission
}

// WithFrontMetaDataUserName adds the frontMetaDataUserName to the cancel order params
func (o *CancelOrderParams) WithFrontMetaDataUserName(frontMetaDataUserName *string) *CancelOrderParams {
	o.SetFrontMetaDataUserName(frontMetaDataUserName)
	return o
}

// SetFrontMetaDataUserName adds the frontMetaDataUserName to the cancel order params
func (o *CancelOrderParams) SetFrontMetaDataUserName(frontMetaDataUserName *string) {
	o.FrontMetaDataUserName = frontMetaDataUserName
}

// WithFrontMetaDataUserPriceInput adds the frontMetaDataUserPriceInput to the cancel order params
func (o *CancelOrderParams) WithFrontMetaDataUserPriceInput(frontMetaDataUserPriceInput *string) *CancelOrderParams {
	o.SetFrontMetaDataUserPriceInput(frontMetaDataUserPriceInput)
	return o
}

// SetFrontMetaDataUserPriceInput adds the frontMetaDataUserPriceInput to the cancel order params
func (o *CancelOrderParams) SetFrontMetaDataUserPriceInput(frontMetaDataUserPriceInput *string) {
	o.FrontMetaDataUserPriceInput = frontMetaDataUserPriceInput
}

// WithID adds the id to the cancel order params
func (o *CancelOrderParams) WithID(id string) *CancelOrderParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the cancel order params
func (o *CancelOrderParams) SetID(id string) {
	o.ID = id
}

// WithOwnerID adds the ownerID to the cancel order params
func (o *CancelOrderParams) WithOwnerID(ownerID *string) *CancelOrderParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the cancel order params
func (o *CancelOrderParams) SetOwnerID(ownerID *string) {
	o.OwnerID = ownerID
}

// WithPrice adds the price to the cancel order params
func (o *CancelOrderParams) WithPrice(price *float64) *CancelOrderParams {
	o.SetPrice(price)
	return o
}

// SetPrice adds the price to the cancel order params
func (o *CancelOrderParams) SetPrice(price *float64) {
	o.Price = price
}

// WithReceiveAddress adds the receiveAddress to the cancel order params
func (o *CancelOrderParams) WithReceiveAddress(receiveAddress *string) *CancelOrderParams {
	o.SetReceiveAddress(receiveAddress)
	return o
}

// SetReceiveAddress adds the receiveAddress to the cancel order params
func (o *CancelOrderParams) SetReceiveAddress(receiveAddress *string) {
	o.ReceiveAddress = receiveAddress
}

// WithSellCurrencySymbol adds the sellCurrencySymbol to the cancel order params
func (o *CancelOrderParams) WithSellCurrencySymbol(sellCurrencySymbol *string) *CancelOrderParams {
	o.SetSellCurrencySymbol(sellCurrencySymbol)
	return o
}

// SetSellCurrencySymbol adds the sellCurrencySymbol to the cancel order params
func (o *CancelOrderParams) SetSellCurrencySymbol(sellCurrencySymbol *string) {
	o.SellCurrencySymbol = sellCurrencySymbol
}

// WithSendingAddress adds the sendingAddress to the cancel order params
func (o *CancelOrderParams) WithSendingAddress(sendingAddress *string) *CancelOrderParams {
	o.SetSendingAddress(sendingAddress)
	return o
}

// SetSendingAddress adds the sendingAddress to the cancel order params
func (o *CancelOrderParams) SetSendingAddress(sendingAddress *string) {
	o.SendingAddress = sendingAddress
}

// WithStatusCreatedAt adds the statusCreatedAt to the cancel order params
func (o *CancelOrderParams) WithStatusCreatedAt(statusCreatedAt *string) *CancelOrderParams {
	o.SetStatusCreatedAt(statusCreatedAt)
	return o
}

// SetStatusCreatedAt adds the statusCreatedAt to the cancel order params
func (o *CancelOrderParams) SetStatusCreatedAt(statusCreatedAt *string) {
	o.StatusCreatedAt = statusCreatedAt
}

// WithStatusStatus adds the statusStatus to the cancel order params
func (o *CancelOrderParams) WithStatusStatus(statusStatus *string) *CancelOrderParams {
	o.SetStatusStatus(statusStatus)
	return o
}

// SetStatusStatus adds the statusStatus to the cancel order params
func (o *CancelOrderParams) SetStatusStatus(statusStatus *string) {
	o.StatusStatus = statusStatus
}

// WriteToRequest writes these params to a swagger request
func (o *CancelOrderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Active != nil {

		// query param active
		var qrActive bool
		if o.Active != nil {
			qrActive = *o.Active
		}
		qActive := swag.FormatBool(qrActive)
		if qActive != "" {
			if err := r.SetQueryParam("active", qActive); err != nil {
				return err
			}
		}

	}

	if o.Amount != nil {

		// query param amount
		var qrAmount float64
		if o.Amount != nil {
			qrAmount = *o.Amount
		}
		qAmount := swag.FormatFloat64(qrAmount)
		if qAmount != "" {
			if err := r.SetQueryParam("amount", qAmount); err != nil {
				return err
			}
		}

	}

	if o.Available != nil {

		// query param available
		var qrAvailable float64
		if o.Available != nil {
			qrAvailable = *o.Available
		}
		qAvailable := swag.FormatFloat64(qrAvailable)
		if qAvailable != "" {
			if err := r.SetQueryParam("available", qAvailable); err != nil {
				return err
			}
		}

	}

	if o.BuyCurrencySymbol != nil {

		// query param buyCurrencySymbol
		var qrBuyCurrencySymbol string
		if o.BuyCurrencySymbol != nil {
			qrBuyCurrencySymbol = *o.BuyCurrencySymbol
		}
		qBuyCurrencySymbol := qrBuyCurrencySymbol
		if qBuyCurrencySymbol != "" {
			if err := r.SetQueryParam("buyCurrencySymbol", qBuyCurrencySymbol); err != nil {
				return err
			}
		}

	}

	if o.Commission != nil {

		// query param commission
		var qrCommission float64
		if o.Commission != nil {
			qrCommission = *o.Commission
		}
		qCommission := swag.FormatFloat64(qrCommission)
		if qCommission != "" {
			if err := r.SetQueryParam("commission", qCommission); err != nil {
				return err
			}
		}

	}

	if o.FrontMetaDataUserName != nil {

		// query param frontMetaData.userName
		var qrFrontMetaDataUserName string
		if o.FrontMetaDataUserName != nil {
			qrFrontMetaDataUserName = *o.FrontMetaDataUserName
		}
		qFrontMetaDataUserName := qrFrontMetaDataUserName
		if qFrontMetaDataUserName != "" {
			if err := r.SetQueryParam("frontMetaData.userName", qFrontMetaDataUserName); err != nil {
				return err
			}
		}

	}

	if o.FrontMetaDataUserPriceInput != nil {

		// query param frontMetaData.userPriceInput
		var qrFrontMetaDataUserPriceInput string
		if o.FrontMetaDataUserPriceInput != nil {
			qrFrontMetaDataUserPriceInput = *o.FrontMetaDataUserPriceInput
		}
		qFrontMetaDataUserPriceInput := qrFrontMetaDataUserPriceInput
		if qFrontMetaDataUserPriceInput != "" {
			if err := r.SetQueryParam("frontMetaData.userPriceInput", qFrontMetaDataUserPriceInput); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.OwnerID != nil {

		// query param ownerId
		var qrOwnerID string
		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID
		if qOwnerID != "" {
			if err := r.SetQueryParam("ownerId", qOwnerID); err != nil {
				return err
			}
		}

	}

	if o.Price != nil {

		// query param price
		var qrPrice float64
		if o.Price != nil {
			qrPrice = *o.Price
		}
		qPrice := swag.FormatFloat64(qrPrice)
		if qPrice != "" {
			if err := r.SetQueryParam("price", qPrice); err != nil {
				return err
			}
		}

	}

	if o.ReceiveAddress != nil {

		// query param receiveAddress
		var qrReceiveAddress string
		if o.ReceiveAddress != nil {
			qrReceiveAddress = *o.ReceiveAddress
		}
		qReceiveAddress := qrReceiveAddress
		if qReceiveAddress != "" {
			if err := r.SetQueryParam("receiveAddress", qReceiveAddress); err != nil {
				return err
			}
		}

	}

	if o.SellCurrencySymbol != nil {

		// query param sellCurrencySymbol
		var qrSellCurrencySymbol string
		if o.SellCurrencySymbol != nil {
			qrSellCurrencySymbol = *o.SellCurrencySymbol
		}
		qSellCurrencySymbol := qrSellCurrencySymbol
		if qSellCurrencySymbol != "" {
			if err := r.SetQueryParam("sellCurrencySymbol", qSellCurrencySymbol); err != nil {
				return err
			}
		}

	}

	if o.SendingAddress != nil {

		// query param sendingAddress
		var qrSendingAddress string
		if o.SendingAddress != nil {
			qrSendingAddress = *o.SendingAddress
		}
		qSendingAddress := qrSendingAddress
		if qSendingAddress != "" {
			if err := r.SetQueryParam("sendingAddress", qSendingAddress); err != nil {
				return err
			}
		}

	}

	if o.StatusCreatedAt != nil {

		// query param status.createdAt
		var qrStatusCreatedAt string
		if o.StatusCreatedAt != nil {
			qrStatusCreatedAt = *o.StatusCreatedAt
		}
		qStatusCreatedAt := qrStatusCreatedAt
		if qStatusCreatedAt != "" {
			if err := r.SetQueryParam("status.createdAt", qStatusCreatedAt); err != nil {
				return err
			}
		}

	}

	if o.StatusStatus != nil {

		// query param status.status
		var qrStatusStatus string
		if o.StatusStatus != nil {
			qrStatusStatus = *o.StatusStatus
		}
		qStatusStatus := qrStatusStatus
		if qStatusStatus != "" {
			if err := r.SetQueryParam("status.status", qStatusStatus); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
