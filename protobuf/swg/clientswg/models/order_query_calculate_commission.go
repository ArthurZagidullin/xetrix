// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OrderQueryCalculateCommission order query calculate commission
// swagger:model orderQuery_CalculateCommission
type OrderQueryCalculateCommission struct {

	// contract
	Contract *OrderContract `json:"contract,omitempty"`

	// order
	Order *OrderOrder `json:"order,omitempty"`

	// participant
	Participant *OrderParticipant `json:"participant,omitempty"`
}

// Validate validates this order query calculate commission
func (m *OrderQueryCalculateCommission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContract(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParticipant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderQueryCalculateCommission) validateContract(formats strfmt.Registry) error {

	if swag.IsZero(m.Contract) { // not required
		return nil
	}

	if m.Contract != nil {
		if err := m.Contract.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contract")
			}
			return err
		}
	}

	return nil
}

func (m *OrderQueryCalculateCommission) validateOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.Order) { // not required
		return nil
	}

	if m.Order != nil {
		if err := m.Order.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("order")
			}
			return err
		}
	}

	return nil
}

func (m *OrderQueryCalculateCommission) validateParticipant(formats strfmt.Registry) error {

	if swag.IsZero(m.Participant) { // not required
		return nil
	}

	if m.Participant != nil {
		if err := m.Participant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("participant")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderQueryCalculateCommission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderQueryCalculateCommission) UnmarshalBinary(b []byte) error {
	var res OrderQueryCalculateCommission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
