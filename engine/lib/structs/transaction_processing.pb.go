// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transaction_processing.proto

package structs

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventTxProccessUpdate struct {
	Tx                   *Tx      `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTxProccessUpdate) Reset()         { *m = EventTxProccessUpdate{} }
func (m *EventTxProccessUpdate) String() string { return proto.CompactTextString(m) }
func (*EventTxProccessUpdate) ProtoMessage()    {}
func (*EventTxProccessUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2dfd657a698334a, []int{0}
}

func (m *EventTxProccessUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTxProccessUpdate.Unmarshal(m, b)
}
func (m *EventTxProccessUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTxProccessUpdate.Marshal(b, m, deterministic)
}
func (m *EventTxProccessUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTxProccessUpdate.Merge(m, src)
}
func (m *EventTxProccessUpdate) XXX_Size() int {
	return xxx_messageInfo_EventTxProccessUpdate.Size(m)
}
func (m *EventTxProccessUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTxProccessUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_EventTxProccessUpdate proto.InternalMessageInfo

func (m *EventTxProccessUpdate) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type EventTxConfirm struct {
	Tx                   *Tx      `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventTxConfirm) Reset()         { *m = EventTxConfirm{} }
func (m *EventTxConfirm) String() string { return proto.CompactTextString(m) }
func (*EventTxConfirm) ProtoMessage()    {}
func (*EventTxConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2dfd657a698334a, []int{1}
}

func (m *EventTxConfirm) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventTxConfirm.Unmarshal(m, b)
}
func (m *EventTxConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventTxConfirm.Marshal(b, m, deterministic)
}
func (m *EventTxConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventTxConfirm.Merge(m, src)
}
func (m *EventTxConfirm) XXX_Size() int {
	return xxx_messageInfo_EventTxConfirm.Size(m)
}
func (m *EventTxConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_EventTxConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_EventTxConfirm proto.InternalMessageInfo

func (m *EventTxConfirm) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type EventETHtxProcces struct {
	Currency             *Currency `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	To                   *Account  `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	OwnerTo              *User     `protobuf:"bytes,3,opt,name=ownerTo,proto3" json:"ownerTo,omitempty"`
	Tx                   *Tx       `protobuf:"bytes,4,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *EventETHtxProcces) Reset()         { *m = EventETHtxProcces{} }
func (m *EventETHtxProcces) String() string { return proto.CompactTextString(m) }
func (*EventETHtxProcces) ProtoMessage()    {}
func (*EventETHtxProcces) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2dfd657a698334a, []int{2}
}

func (m *EventETHtxProcces) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventETHtxProcces.Unmarshal(m, b)
}
func (m *EventETHtxProcces) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventETHtxProcces.Marshal(b, m, deterministic)
}
func (m *EventETHtxProcces) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventETHtxProcces.Merge(m, src)
}
func (m *EventETHtxProcces) XXX_Size() int {
	return xxx_messageInfo_EventETHtxProcces.Size(m)
}
func (m *EventETHtxProcces) XXX_DiscardUnknown() {
	xxx_messageInfo_EventETHtxProcces.DiscardUnknown(m)
}

var xxx_messageInfo_EventETHtxProcces proto.InternalMessageInfo

func (m *EventETHtxProcces) GetCurrency() *Currency {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *EventETHtxProcces) GetTo() *Account {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *EventETHtxProcces) GetOwnerTo() *User {
	if m != nil {
		return m.OwnerTo
	}
	return nil
}

func (m *EventETHtxProcces) GetTx() *Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

type Query_TxsPrepareProccess struct {
	TxsId                []string `protobuf:"bytes,2,rep,name=txsId,proto3" json:"txsId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query_TxsPrepareProccess) Reset()         { *m = Query_TxsPrepareProccess{} }
func (m *Query_TxsPrepareProccess) String() string { return proto.CompactTextString(m) }
func (*Query_TxsPrepareProccess) ProtoMessage()    {}
func (*Query_TxsPrepareProccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2dfd657a698334a, []int{3}
}

func (m *Query_TxsPrepareProccess) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query_TxsPrepareProccess.Unmarshal(m, b)
}
func (m *Query_TxsPrepareProccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query_TxsPrepareProccess.Marshal(b, m, deterministic)
}
func (m *Query_TxsPrepareProccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query_TxsPrepareProccess.Merge(m, src)
}
func (m *Query_TxsPrepareProccess) XXX_Size() int {
	return xxx_messageInfo_Query_TxsPrepareProccess.Size(m)
}
func (m *Query_TxsPrepareProccess) XXX_DiscardUnknown() {
	xxx_messageInfo_Query_TxsPrepareProccess.DiscardUnknown(m)
}

var xxx_messageInfo_Query_TxsPrepareProccess proto.InternalMessageInfo

func (m *Query_TxsPrepareProccess) GetTxsId() []string {
	if m != nil {
		return m.TxsId
	}
	return nil
}

func init() {
	proto.RegisterType((*EventTxProccessUpdate)(nil), "structs.EventTxProccessUpdate")
	proto.RegisterType((*EventTxConfirm)(nil), "structs.EventTxConfirm")
	proto.RegisterType((*EventETHtxProcces)(nil), "structs.EventETHtxProcces")
	proto.RegisterType((*Query_TxsPrepareProccess)(nil), "structs.Query_TxsPrepareProccess")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceTransactionProcessingClient is the client API for ServiceTransactionProcessing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceTransactionProcessingClient interface {
	ConfirmTx(ctx context.Context, in *Query_Tx, opts ...grpc.CallOption) (*Response_Tx, error)
	UnderstandingRawTx(ctx context.Context, in *Query_RawTx, opts ...grpc.CallOption) (*Response_Tx, error)
	CreateInternalContract(ctx context.Context, in *Query_CreateContract, opts ...grpc.CallOption) (*Response_Contract, error)
	NeedPrepareTxs(ctx context.Context, in *Query_TxsPrepareProccess, opts ...grpc.CallOption) (*Empty, error)
	TxsPrepared(ctx context.Context, in *Query_TxsPrepareProccess, opts ...grpc.CallOption) (*Empty, error)
}

type serviceTransactionProcessingClient struct {
	cc *grpc.ClientConn
}

func NewServiceTransactionProcessingClient(cc *grpc.ClientConn) ServiceTransactionProcessingClient {
	return &serviceTransactionProcessingClient{cc}
}

func (c *serviceTransactionProcessingClient) ConfirmTx(ctx context.Context, in *Query_Tx, opts ...grpc.CallOption) (*Response_Tx, error) {
	out := new(Response_Tx)
	err := c.cc.Invoke(ctx, "/structs.ServiceTransactionProcessing/ConfirmTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTransactionProcessingClient) UnderstandingRawTx(ctx context.Context, in *Query_RawTx, opts ...grpc.CallOption) (*Response_Tx, error) {
	out := new(Response_Tx)
	err := c.cc.Invoke(ctx, "/structs.ServiceTransactionProcessing/UnderstandingRawTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTransactionProcessingClient) CreateInternalContract(ctx context.Context, in *Query_CreateContract, opts ...grpc.CallOption) (*Response_Contract, error) {
	out := new(Response_Contract)
	err := c.cc.Invoke(ctx, "/structs.ServiceTransactionProcessing/CreateInternalContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTransactionProcessingClient) NeedPrepareTxs(ctx context.Context, in *Query_TxsPrepareProccess, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/structs.ServiceTransactionProcessing/NeedPrepareTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTransactionProcessingClient) TxsPrepared(ctx context.Context, in *Query_TxsPrepareProccess, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/structs.ServiceTransactionProcessing/TxsPrepared", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTransactionProcessingServer is the server API for ServiceTransactionProcessing service.
type ServiceTransactionProcessingServer interface {
	ConfirmTx(context.Context, *Query_Tx) (*Response_Tx, error)
	UnderstandingRawTx(context.Context, *Query_RawTx) (*Response_Tx, error)
	CreateInternalContract(context.Context, *Query_CreateContract) (*Response_Contract, error)
	NeedPrepareTxs(context.Context, *Query_TxsPrepareProccess) (*Empty, error)
	TxsPrepared(context.Context, *Query_TxsPrepareProccess) (*Empty, error)
}

func RegisterServiceTransactionProcessingServer(s *grpc.Server, srv ServiceTransactionProcessingServer) {
	s.RegisterService(&_ServiceTransactionProcessing_serviceDesc, srv)
}

func _ServiceTransactionProcessing_ConfirmTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query_Tx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTransactionProcessingServer).ConfirmTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.ServiceTransactionProcessing/ConfirmTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTransactionProcessingServer).ConfirmTx(ctx, req.(*Query_Tx))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTransactionProcessing_UnderstandingRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query_RawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTransactionProcessingServer).UnderstandingRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.ServiceTransactionProcessing/UnderstandingRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTransactionProcessingServer).UnderstandingRawTx(ctx, req.(*Query_RawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTransactionProcessing_CreateInternalContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query_CreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTransactionProcessingServer).CreateInternalContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.ServiceTransactionProcessing/CreateInternalContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTransactionProcessingServer).CreateInternalContract(ctx, req.(*Query_CreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTransactionProcessing_NeedPrepareTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query_TxsPrepareProccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTransactionProcessingServer).NeedPrepareTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.ServiceTransactionProcessing/NeedPrepareTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTransactionProcessingServer).NeedPrepareTxs(ctx, req.(*Query_TxsPrepareProccess))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTransactionProcessing_TxsPrepared_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query_TxsPrepareProccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTransactionProcessingServer).TxsPrepared(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/structs.ServiceTransactionProcessing/TxsPrepared",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTransactionProcessingServer).TxsPrepared(ctx, req.(*Query_TxsPrepareProccess))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceTransactionProcessing_serviceDesc = grpc.ServiceDesc{
	ServiceName: "structs.ServiceTransactionProcessing",
	HandlerType: (*ServiceTransactionProcessingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmTx",
			Handler:    _ServiceTransactionProcessing_ConfirmTx_Handler,
		},
		{
			MethodName: "UnderstandingRawTx",
			Handler:    _ServiceTransactionProcessing_UnderstandingRawTx_Handler,
		},
		{
			MethodName: "CreateInternalContract",
			Handler:    _ServiceTransactionProcessing_CreateInternalContract_Handler,
		},
		{
			MethodName: "NeedPrepareTxs",
			Handler:    _ServiceTransactionProcessing_NeedPrepareTxs_Handler,
		},
		{
			MethodName: "TxsPrepared",
			Handler:    _ServiceTransactionProcessing_TxsPrepared_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction_processing.proto",
}

func init() { proto.RegisterFile("transaction_processing.proto", fileDescriptor_d2dfd657a698334a) }

var fileDescriptor_d2dfd657a698334a = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x15, 0xb7, 0x50, 0xba, 0x69, 0x23, 0xb2, 0x04, 0x6a, 0x4c, 0x80, 0xe0, 0x0b, 0x55,
	0xa5, 0xc4, 0x50, 0x38, 0xf5, 0x86, 0xa2, 0x48, 0xe4, 0x82, 0x82, 0x71, 0x90, 0x38, 0x99, 0x65,
	0x3d, 0x44, 0x96, 0x9a, 0x5d, 0x6b, 0x77, 0x92, 0x6c, 0x84, 0xb8, 0xf0, 0x08, 0xf0, 0x16, 0xbc,
	0x0e, 0xaf, 0xc0, 0x83, 0xa0, 0xac, 0xd7, 0x0e, 0x4a, 0x81, 0x03, 0xc7, 0x99, 0xef, 0x9b, 0xfd,
	0xcd, 0x1f, 0x2d, 0xe9, 0xa2, 0x62, 0x42, 0x33, 0x8e, 0xb9, 0x14, 0x69, 0xa1, 0x24, 0x07, 0xad,
	0x73, 0x31, 0x1b, 0x14, 0x4a, 0xa2, 0xa4, 0x07, 0x1a, 0xd5, 0x82, 0xa3, 0x0e, 0x8e, 0xb8, 0x9c,
	0xcf, 0xa5, 0x28, 0xd3, 0x41, 0x8b, 0x2f, 0x94, 0x02, 0xc1, 0xd7, 0x2e, 0x6e, 0x4a, 0x95, 0x81,
	0x72, 0xc1, 0x31, 0xe3, 0x5c, 0x2e, 0x04, 0xba, 0xb0, 0xfd, 0x1b, 0xc0, 0xa5, 0xc8, 0x42, 0xd7,
	0xee, 0xee, 0x4c, 0xca, 0xd9, 0x25, 0x44, 0xac, 0xc8, 0x23, 0x26, 0x84, 0x44, 0xb6, 0x31, 0xea,
	0x52, 0x0d, 0x9f, 0x93, 0xdb, 0xa3, 0x25, 0x08, 0x4c, 0xcc, 0x44, 0x49, 0xbe, 0xe9, 0x6d, 0x5a,
	0x64, 0x0c, 0x81, 0xde, 0x23, 0x1e, 0x1a, 0xbf, 0xd1, 0x6b, 0x9c, 0x36, 0xcf, 0x9b, 0x03, 0xd7,
	0xe5, 0x20, 0x31, 0xb1, 0x87, 0x26, 0xec, 0x93, 0x96, 0xab, 0x1a, 0x4a, 0xf1, 0x31, 0x57, 0xf3,
	0x7f, 0xdb, 0xbf, 0x37, 0x48, 0xdb, 0xfa, 0x47, 0xc9, 0x4b, 0xac, 0x40, 0xb4, 0x4f, 0x6e, 0x54,
	0x53, 0xba, 0xc2, 0x76, 0x5d, 0x38, 0x74, 0x42, 0x5c, 0x5b, 0x68, 0x8f, 0x78, 0x28, 0x7d, 0xcf,
	0x1a, 0x6f, 0xd6, 0xc6, 0x17, 0xe5, 0x2a, 0x62, 0x0f, 0x25, 0x7d, 0x4c, 0x0e, 0xe4, 0x4a, 0x80,
	0x4a, 0xa4, 0xbf, 0x67, 0x6d, 0xc7, 0xb5, 0x6d, 0xaa, 0x41, 0xc5, 0x95, 0xea, 0x9a, 0xdd, 0xff,
	0x73, 0xb3, 0x4f, 0x88, 0xff, 0x7a, 0x01, 0x6a, 0x9d, 0x26, 0x46, 0x4f, 0x14, 0x14, 0x4c, 0x41,
	0xb5, 0x1a, 0xda, 0x21, 0xd7, 0xd0, 0xe8, 0x71, 0xe6, 0x7b, 0xbd, 0xbd, 0xd3, 0xc3, 0xb8, 0x0c,
	0xce, 0xbf, 0xee, 0x93, 0xee, 0x1b, 0x50, 0xcb, 0x9c, 0x43, 0xb2, 0x3d, 0xc5, 0xa4, 0x3e, 0x35,
	0x7d, 0x4b, 0x0e, 0xdd, 0x9e, 0x12, 0x43, 0xb7, 0x43, 0x56, 0x98, 0xa0, 0x53, 0xa7, 0x62, 0xd0,
	0x85, 0x14, 0x1a, 0xd2, 0xc4, 0x84, 0xbd, 0x2f, 0x3f, 0x7e, 0x7e, 0xf3, 0x02, 0xea, 0x47, 0xe9,
	0xf2, 0x69, 0x9f, 0x45, 0xbc, 0x7c, 0x22, 0x45, 0x13, 0x7d, 0x42, 0x33, 0xce, 0x3e, 0xd3, 0x77,
	0x84, 0x4e, 0x45, 0x06, 0x4a, 0x23, 0x13, 0x59, 0x2e, 0x66, 0x31, 0x5b, 0x25, 0x86, 0x76, 0x76,
	0x00, 0x36, 0xfb, 0x17, 0xc6, 0x89, 0x65, 0xb4, 0xc3, 0x23, 0xc7, 0x50, 0x6c, 0x85, 0xe6, 0xa2,
	0x71, 0x46, 0x91, 0xdc, 0x19, 0x2a, 0x60, 0x08, 0x63, 0x81, 0xa0, 0x04, 0xbb, 0x1c, 0x4a, 0x81,
	0x8a, 0x71, 0xa4, 0xf7, 0x77, 0x9e, 0x2f, 0x6d, 0x95, 0x1c, 0x04, 0x57, 0x39, 0x95, 0x16, 0x3e,
	0xb4, 0xb4, 0xbb, 0x61, 0x67, 0x43, 0x8b, 0xb8, 0x2d, 0x4c, 0xb9, 0x53, 0x37, 0xd4, 0x19, 0x69,
	0xbd, 0x02, 0xc8, 0xdc, 0xda, 0x13, 0xa3, 0xe9, 0xa3, 0x2b, 0xdb, 0xda, 0x3d, 0x4a, 0xd0, 0xaa,
	0x2d, 0xa3, 0x79, 0x81, 0xeb, 0x30, 0xb4, 0x94, 0x6e, 0x78, 0xe2, 0x66, 0x12, 0x00, 0x59, 0xbf,
	0x28, 0x8b, 0xfa, 0x68, 0xf4, 0x06, 0xf4, 0x9e, 0x34, 0xb7, 0x2f, 0x65, 0xff, 0x43, 0x79, 0x60,
	0x29, 0x7e, 0x78, 0xcb, 0x51, 0xd0, 0xe8, 0x0a, 0x92, 0x5d, 0x34, 0xce, 0x3e, 0x5c, 0xb7, 0xff,
	0xeb, 0xd9, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x1f, 0x8c, 0xa0, 0xff, 0x03, 0x00, 0x00,
}
