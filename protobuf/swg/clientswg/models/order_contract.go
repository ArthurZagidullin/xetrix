// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OrderContract order contract
// swagger:model orderContract
type OrderContract struct {

	// amount
	Amount float64 `json:"amount,omitempty"`

	// available
	Available float64 `json:"available,omitempty"`

	// @inject_tag: bson:"_id,omitempty"
	// Format: byte
	BsonID strfmt.Base64 `json:"bsonId,omitempty"`

	// buyer commission
	BuyerCommission *OrderCommission `json:"buyerCommission,omitempty"`

	// buyer Id
	BuyerID string `json:"buyerId,omitempty"`

	// buyer receive address
	BuyerReceiveAddress string `json:"buyerReceiveAddress,omitempty"`

	// buyer send address
	BuyerSendAddress string `json:"buyerSendAddress,omitempty"`

	// cost
	Cost float64 `json:"cost,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// front meta data
	FrontMetaData *OrderFrontMetaData `json:"frontMetaData,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// order Id
	OrderID string `json:"orderId,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// seller commission
	SellerCommission *OrderCommission `json:"sellerCommission,omitempty"`

	// seller Id
	SellerID string `json:"sellerId,omitempty"`

	// seller receive address
	SellerReceiveAddress string `json:"sellerReceiveAddress,omitempty"`

	// seller send address
	SellerSendAddress string `json:"sellerSendAddress,omitempty"`

	// status
	Status *OrderDealStatus `json:"status,omitempty"`
}

// Validate validates this order contract
func (m *OrderContract) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBsonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderContract) validateBsonID(formats strfmt.Registry) error {

	if swag.IsZero(m.BsonID) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *OrderContract) validateBuyerCommission(formats strfmt.Registry) error {

	if swag.IsZero(m.BuyerCommission) { // not required
		return nil
	}

	if m.BuyerCommission != nil {
		if err := m.BuyerCommission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerCommission")
			}
			return err
		}
	}

	return nil
}

func (m *OrderContract) validateFrontMetaData(formats strfmt.Registry) error {

	if swag.IsZero(m.FrontMetaData) { // not required
		return nil
	}

	if m.FrontMetaData != nil {
		if err := m.FrontMetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontMetaData")
			}
			return err
		}
	}

	return nil
}

func (m *OrderContract) validateSellerCommission(formats strfmt.Registry) error {

	if swag.IsZero(m.SellerCommission) { // not required
		return nil
	}

	if m.SellerCommission != nil {
		if err := m.SellerCommission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellerCommission")
			}
			return err
		}
	}

	return nil
}

func (m *OrderContract) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderContract) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderContract) UnmarshalBinary(b []byte) error {
	var res OrderContract
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
