// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OrderOrder order order
// swagger:model orderOrder
type OrderOrder struct {

	// amount
	Amount float64 `json:"amount,omitempty"`

	// available
	Available float64 `json:"available,omitempty"`

	// @inject_tag: bson:"_id,omitempty"
	// Format: byte
	BsonID strfmt.Base64 `json:"bsonId,omitempty"`

	// buy currency symbol
	BuyCurrencySymbol string `json:"buyCurrencySymbol,omitempty"`

	// commission
	Commission *OrderCommission `json:"commission,omitempty"`

	// contracts
	Contracts []*OrderContract `json:"contracts"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// front meta data
	FrontMetaData *OrderFrontMetaData `json:"frontMetaData,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// owner Id
	OwnerID string `json:"ownerId,omitempty"`

	// price
	Price float64 `json:"price,omitempty"`

	// receive address
	ReceiveAddress string `json:"receiveAddress,omitempty"`

	// sell currency symbol
	SellCurrencySymbol string `json:"sellCurrencySymbol,omitempty"`

	// sending address
	SendingAddress string `json:"sendingAddress,omitempty"`

	// status
	Status *OrderDealStatus `json:"status,omitempty"`
}

// Validate validates this order order
func (m *OrderOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBsonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContracts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrontMetaData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderOrder) validateBsonID(formats strfmt.Registry) error {

	if swag.IsZero(m.BsonID) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *OrderOrder) validateCommission(formats strfmt.Registry) error {

	if swag.IsZero(m.Commission) { // not required
		return nil
	}

	if m.Commission != nil {
		if err := m.Commission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commission")
			}
			return err
		}
	}

	return nil
}

func (m *OrderOrder) validateContracts(formats strfmt.Registry) error {

	if swag.IsZero(m.Contracts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contracts); i++ {
		if swag.IsZero(m.Contracts[i]) { // not required
			continue
		}

		if m.Contracts[i] != nil {
			if err := m.Contracts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contracts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderOrder) validateFrontMetaData(formats strfmt.Registry) error {

	if swag.IsZero(m.FrontMetaData) { // not required
		return nil
	}

	if m.FrontMetaData != nil {
		if err := m.FrontMetaData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("frontMetaData")
			}
			return err
		}
	}

	return nil
}

func (m *OrderOrder) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderOrder) UnmarshalBinary(b []byte) error {
	var res OrderOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
