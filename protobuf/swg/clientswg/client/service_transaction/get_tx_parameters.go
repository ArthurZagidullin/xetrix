// Code generated by go-swagger; DO NOT EDIT.

package service_transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetTxParams creates a new GetTxParams object
// with the default values initialized.
func NewGetTxParams() *GetTxParams {
	var (
		reasonStatusDefault = string("UNREASON_TX")
	)
	return &GetTxParams{
		ReasonStatus: &reasonStatusDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetTxParamsWithTimeout creates a new GetTxParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetTxParamsWithTimeout(timeout time.Duration) *GetTxParams {
	var (
		reasonStatusDefault = string("UNREASON_TX")
	)
	return &GetTxParams{
		ReasonStatus: &reasonStatusDefault,

		timeout: timeout,
	}
}

// NewGetTxParamsWithContext creates a new GetTxParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetTxParamsWithContext(ctx context.Context) *GetTxParams {
	var (
		reasonStatusDefault = string("UNREASON_TX")
	)
	return &GetTxParams{
		ReasonStatus: &reasonStatusDefault,

		Context: ctx,
	}
}

// NewGetTxParamsWithHTTPClient creates a new GetTxParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetTxParamsWithHTTPClient(client *http.Client) *GetTxParams {
	var (
		reasonStatusDefault = string("UNREASON_TX")
	)
	return &GetTxParams{
		ReasonStatus: &reasonStatusDefault,
		HTTPClient:   client,
	}
}

/*GetTxParams contains all the parameters to send to the API endpoint
for the get tx operation typically these are written to a http.Request
*/
type GetTxParams struct {

	/*Address*/
	Address *string
	/*ContractID*/
	ContractID *string
	/*FromAddress*/
	FromAddress *string
	/*ReasonContractID*/
	ReasonContractID *string
	/*ReasonStatus*/
	ReasonStatus *string
	/*ReasonTxID*/
	ReasonTxID *string
	/*ToAddress*/
	ToAddress *string
	/*TxID*/
	TxID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get tx params
func (o *GetTxParams) WithTimeout(timeout time.Duration) *GetTxParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get tx params
func (o *GetTxParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get tx params
func (o *GetTxParams) WithContext(ctx context.Context) *GetTxParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get tx params
func (o *GetTxParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get tx params
func (o *GetTxParams) WithHTTPClient(client *http.Client) *GetTxParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get tx params
func (o *GetTxParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddress adds the address to the get tx params
func (o *GetTxParams) WithAddress(address *string) *GetTxParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the get tx params
func (o *GetTxParams) SetAddress(address *string) {
	o.Address = address
}

// WithContractID adds the contractID to the get tx params
func (o *GetTxParams) WithContractID(contractID *string) *GetTxParams {
	o.SetContractID(contractID)
	return o
}

// SetContractID adds the contractId to the get tx params
func (o *GetTxParams) SetContractID(contractID *string) {
	o.ContractID = contractID
}

// WithFromAddress adds the fromAddress to the get tx params
func (o *GetTxParams) WithFromAddress(fromAddress *string) *GetTxParams {
	o.SetFromAddress(fromAddress)
	return o
}

// SetFromAddress adds the fromAddress to the get tx params
func (o *GetTxParams) SetFromAddress(fromAddress *string) {
	o.FromAddress = fromAddress
}

// WithReasonContractID adds the reasonContractID to the get tx params
func (o *GetTxParams) WithReasonContractID(reasonContractID *string) *GetTxParams {
	o.SetReasonContractID(reasonContractID)
	return o
}

// SetReasonContractID adds the reasonContractId to the get tx params
func (o *GetTxParams) SetReasonContractID(reasonContractID *string) {
	o.ReasonContractID = reasonContractID
}

// WithReasonStatus adds the reasonStatus to the get tx params
func (o *GetTxParams) WithReasonStatus(reasonStatus *string) *GetTxParams {
	o.SetReasonStatus(reasonStatus)
	return o
}

// SetReasonStatus adds the reasonStatus to the get tx params
func (o *GetTxParams) SetReasonStatus(reasonStatus *string) {
	o.ReasonStatus = reasonStatus
}

// WithReasonTxID adds the reasonTxID to the get tx params
func (o *GetTxParams) WithReasonTxID(reasonTxID *string) *GetTxParams {
	o.SetReasonTxID(reasonTxID)
	return o
}

// SetReasonTxID adds the reasonTxId to the get tx params
func (o *GetTxParams) SetReasonTxID(reasonTxID *string) {
	o.ReasonTxID = reasonTxID
}

// WithToAddress adds the toAddress to the get tx params
func (o *GetTxParams) WithToAddress(toAddress *string) *GetTxParams {
	o.SetToAddress(toAddress)
	return o
}

// SetToAddress adds the toAddress to the get tx params
func (o *GetTxParams) SetToAddress(toAddress *string) {
	o.ToAddress = toAddress
}

// WithTxID adds the txID to the get tx params
func (o *GetTxParams) WithTxID(txID string) *GetTxParams {
	o.SetTxID(txID)
	return o
}

// SetTxID adds the txId to the get tx params
func (o *GetTxParams) SetTxID(txID string) {
	o.TxID = txID
}

// WriteToRequest writes these params to a swagger request
func (o *GetTxParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Address != nil {

		// query param address
		var qrAddress string
		if o.Address != nil {
			qrAddress = *o.Address
		}
		qAddress := qrAddress
		if qAddress != "" {
			if err := r.SetQueryParam("address", qAddress); err != nil {
				return err
			}
		}

	}

	if o.ContractID != nil {

		// query param contractId
		var qrContractID string
		if o.ContractID != nil {
			qrContractID = *o.ContractID
		}
		qContractID := qrContractID
		if qContractID != "" {
			if err := r.SetQueryParam("contractId", qContractID); err != nil {
				return err
			}
		}

	}

	if o.FromAddress != nil {

		// query param fromAddress
		var qrFromAddress string
		if o.FromAddress != nil {
			qrFromAddress = *o.FromAddress
		}
		qFromAddress := qrFromAddress
		if qFromAddress != "" {
			if err := r.SetQueryParam("fromAddress", qFromAddress); err != nil {
				return err
			}
		}

	}

	if o.ReasonContractID != nil {

		// query param reason.contractId
		var qrReasonContractID string
		if o.ReasonContractID != nil {
			qrReasonContractID = *o.ReasonContractID
		}
		qReasonContractID := qrReasonContractID
		if qReasonContractID != "" {
			if err := r.SetQueryParam("reason.contractId", qReasonContractID); err != nil {
				return err
			}
		}

	}

	if o.ReasonStatus != nil {

		// query param reason.status
		var qrReasonStatus string
		if o.ReasonStatus != nil {
			qrReasonStatus = *o.ReasonStatus
		}
		qReasonStatus := qrReasonStatus
		if qReasonStatus != "" {
			if err := r.SetQueryParam("reason.status", qReasonStatus); err != nil {
				return err
			}
		}

	}

	if o.ReasonTxID != nil {

		// query param reason.txId
		var qrReasonTxID string
		if o.ReasonTxID != nil {
			qrReasonTxID = *o.ReasonTxID
		}
		qReasonTxID := qrReasonTxID
		if qReasonTxID != "" {
			if err := r.SetQueryParam("reason.txId", qReasonTxID); err != nil {
				return err
			}
		}

	}

	if o.ToAddress != nil {

		// query param toAddress
		var qrToAddress string
		if o.ToAddress != nil {
			qrToAddress = *o.ToAddress
		}
		qToAddress := qrToAddress
		if qToAddress != "" {
			if err := r.SetQueryParam("toAddress", qToAddress); err != nil {
				return err
			}
		}

	}

	// path param txId
	if err := r.SetPathParam("txId", o.TxID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
