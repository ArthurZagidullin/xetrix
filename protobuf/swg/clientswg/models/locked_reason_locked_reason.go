// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// LockedReasonLockedReason locked reason locked reason
// swagger:model LockedReason_LockedReason
type LockedReasonLockedReason string

const (

	// LockedReasonLockedReasonREASONUNVERIFIEDLOCKED captures enum value "REASON_UNVERIFIED_LOCKED"
	LockedReasonLockedReasonREASONUNVERIFIEDLOCKED LockedReasonLockedReason = "REASON_UNVERIFIED_LOCKED"

	// LockedReasonLockedReasonREASONCONTRACTLOCKED captures enum value "REASON_CONTRACT_LOCKED"
	LockedReasonLockedReasonREASONCONTRACTLOCKED LockedReasonLockedReason = "REASON_CONTRACT_LOCKED"

	// LockedReasonLockedReasonREASONORDERLOCKED captures enum value "REASON_ORDER_LOCKED"
	LockedReasonLockedReasonREASONORDERLOCKED LockedReasonLockedReason = "REASON_ORDER_LOCKED"

	// LockedReasonLockedReasonREASONCOMMISSIONLOCKED captures enum value "REASON_COMMISSION_LOCKED"
	LockedReasonLockedReasonREASONCOMMISSIONLOCKED LockedReasonLockedReason = "REASON_COMMISSION_LOCKED"
)

// for schema
var lockedReasonLockedReasonEnum []interface{}

func init() {
	var res []LockedReasonLockedReason
	if err := json.Unmarshal([]byte(`["REASON_UNVERIFIED_LOCKED","REASON_CONTRACT_LOCKED","REASON_ORDER_LOCKED","REASON_COMMISSION_LOCKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lockedReasonLockedReasonEnum = append(lockedReasonLockedReasonEnum, v)
	}
}

func (m LockedReasonLockedReason) validateLockedReasonLockedReasonEnum(path, location string, value LockedReasonLockedReason) error {
	if err := validate.Enum(path, location, value, lockedReasonLockedReasonEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this locked reason locked reason
func (m LockedReasonLockedReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLockedReasonLockedReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
