// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OrderTx order tx
// swagger:model orderTx
type OrderTx struct {

	// amount
	Amount float64 `json:"amount,omitempty"`

	// @inject_tag: bson:"_id,omitempty"
	// Format: byte
	BsonID strfmt.Base64 `json:"bsonId,omitempty"`

	// created at
	CreatedAt string `json:"createdAt,omitempty"`

	// currency symbol
	CurrencySymbol string `json:"currencySymbol,omitempty"`

	// dependencies
	Dependencies []*OrderTx `json:"dependencies"`

	// from address
	FromAddress string `json:"fromAddress,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// reason
	Reason *OrderTxReason `json:"reason,omitempty"`

	// related
	Related []*OrderTx `json:"related"`

	// status
	Status OrderTxStatus `json:"status,omitempty"`

	// to address
	ToAddress string `json:"toAddress,omitempty"`
}

// Validate validates this order tx
func (m *OrderTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBsonID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderTx) validateBsonID(formats strfmt.Registry) error {

	if swag.IsZero(m.BsonID) { // not required
		return nil
	}

	// Format "byte" (base64 string) is already validated when unmarshalled

	return nil
}

func (m *OrderTx) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	for i := 0; i < len(m.Dependencies); i++ {
		if swag.IsZero(m.Dependencies[i]) { // not required
			continue
		}

		if m.Dependencies[i] != nil {
			if err := m.Dependencies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dependencies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderTx) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	if m.Reason != nil {
		if err := m.Reason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reason")
			}
			return err
		}
	}

	return nil
}

func (m *OrderTx) validateRelated(formats strfmt.Registry) error {

	if swag.IsZero(m.Related) { // not required
		return nil
	}

	for i := 0; i < len(m.Related); i++ {
		if swag.IsZero(m.Related[i]) { // not required
			continue
		}

		if m.Related[i] != nil {
			if err := m.Related[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("related" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderTx) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderTx) UnmarshalBinary(b []byte) error {
	var res OrderTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
