// Code generated by go-swagger; DO NOT EDIT.

package service_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAccountParams creates a new GetAccountParams object
// with the default values initialized.
func NewGetAccountParams() *GetAccountParams {
	var ()
	return &GetAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccountParamsWithTimeout creates a new GetAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAccountParamsWithTimeout(timeout time.Duration) *GetAccountParams {
	var ()
	return &GetAccountParams{

		timeout: timeout,
	}
}

// NewGetAccountParamsWithContext creates a new GetAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAccountParamsWithContext(ctx context.Context) *GetAccountParams {
	var ()
	return &GetAccountParams{

		Context: ctx,
	}
}

// NewGetAccountParamsWithHTTPClient creates a new GetAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAccountParamsWithHTTPClient(client *http.Client) *GetAccountParams {
	var ()
	return &GetAccountParams{
		HTTPClient: client,
	}
}

/*GetAccountParams contains all the parameters to send to the API endpoint
for the get account operation typically these are written to a http.Request
*/
type GetAccountParams struct {

	/*AccountID*/
	AccountID *string
	/*Address*/
	Address string
	/*CurrencySymbol*/
	CurrencySymbol *string
	/*ParticipantID*/
	ParticipantID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get account params
func (o *GetAccountParams) WithTimeout(timeout time.Duration) *GetAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get account params
func (o *GetAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get account params
func (o *GetAccountParams) WithContext(ctx context.Context) *GetAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get account params
func (o *GetAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get account params
func (o *GetAccountParams) WithHTTPClient(client *http.Client) *GetAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get account params
func (o *GetAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get account params
func (o *GetAccountParams) WithAccountID(accountID *string) *GetAccountParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get account params
func (o *GetAccountParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithAddress adds the address to the get account params
func (o *GetAccountParams) WithAddress(address string) *GetAccountParams {
	o.SetAddress(address)
	return o
}

// SetAddress adds the address to the get account params
func (o *GetAccountParams) SetAddress(address string) {
	o.Address = address
}

// WithCurrencySymbol adds the currencySymbol to the get account params
func (o *GetAccountParams) WithCurrencySymbol(currencySymbol *string) *GetAccountParams {
	o.SetCurrencySymbol(currencySymbol)
	return o
}

// SetCurrencySymbol adds the currencySymbol to the get account params
func (o *GetAccountParams) SetCurrencySymbol(currencySymbol *string) {
	o.CurrencySymbol = currencySymbol
}

// WithParticipantID adds the participantID to the get account params
func (o *GetAccountParams) WithParticipantID(participantID *string) *GetAccountParams {
	o.SetParticipantID(participantID)
	return o
}

// SetParticipantID adds the participantId to the get account params
func (o *GetAccountParams) SetParticipantID(participantID *string) {
	o.ParticipantID = participantID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	// path param address
	if err := r.SetPathParam("address", o.Address); err != nil {
		return err
	}

	if o.CurrencySymbol != nil {

		// query param currencySymbol
		var qrCurrencySymbol string
		if o.CurrencySymbol != nil {
			qrCurrencySymbol = *o.CurrencySymbol
		}
		qCurrencySymbol := qrCurrencySymbol
		if qCurrencySymbol != "" {
			if err := r.SetQueryParam("currencySymbol", qCurrencySymbol); err != nil {
				return err
			}
		}

	}

	if o.ParticipantID != nil {

		// query param participantId
		var qrParticipantID string
		if o.ParticipantID != nil {
			qrParticipantID = *o.ParticipantID
		}
		qParticipantID := qrParticipantID
		if qParticipantID != "" {
			if err := r.SetQueryParam("participantId", qParticipantID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
