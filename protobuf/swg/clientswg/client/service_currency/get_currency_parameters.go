// Code generated by go-swagger; DO NOT EDIT.

package service_currency

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCurrencyParams creates a new GetCurrencyParams object
// with the default values initialized.
func NewGetCurrencyParams() *GetCurrencyParams {
	var ()
	return &GetCurrencyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCurrencyParamsWithTimeout creates a new GetCurrencyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCurrencyParamsWithTimeout(timeout time.Duration) *GetCurrencyParams {
	var ()
	return &GetCurrencyParams{

		timeout: timeout,
	}
}

// NewGetCurrencyParamsWithContext creates a new GetCurrencyParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCurrencyParamsWithContext(ctx context.Context) *GetCurrencyParams {
	var ()
	return &GetCurrencyParams{

		Context: ctx,
	}
}

// NewGetCurrencyParamsWithHTTPClient creates a new GetCurrencyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCurrencyParamsWithHTTPClient(client *http.Client) *GetCurrencyParams {
	var ()
	return &GetCurrencyParams{
		HTTPClient: client,
	}
}

/*GetCurrencyParams contains all the parameters to send to the API endpoint
for the get currency operation typically these are written to a http.Request
*/
type GetCurrencyParams struct {

	/*ID*/
	ID *string
	/*Name*/
	Name *string
	/*Symbol*/
	Symbol *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get currency params
func (o *GetCurrencyParams) WithTimeout(timeout time.Duration) *GetCurrencyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get currency params
func (o *GetCurrencyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get currency params
func (o *GetCurrencyParams) WithContext(ctx context.Context) *GetCurrencyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get currency params
func (o *GetCurrencyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get currency params
func (o *GetCurrencyParams) WithHTTPClient(client *http.Client) *GetCurrencyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get currency params
func (o *GetCurrencyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get currency params
func (o *GetCurrencyParams) WithID(id *string) *GetCurrencyParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get currency params
func (o *GetCurrencyParams) SetID(id *string) {
	o.ID = id
}

// WithName adds the name to the get currency params
func (o *GetCurrencyParams) WithName(name *string) *GetCurrencyParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get currency params
func (o *GetCurrencyParams) SetName(name *string) {
	o.Name = name
}

// WithSymbol adds the symbol to the get currency params
func (o *GetCurrencyParams) WithSymbol(symbol *string) *GetCurrencyParams {
	o.SetSymbol(symbol)
	return o
}

// SetSymbol adds the symbol to the get currency params
func (o *GetCurrencyParams) SetSymbol(symbol *string) {
	o.Symbol = symbol
}

// WriteToRequest writes these params to a swagger request
func (o *GetCurrencyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Symbol != nil {

		// query param symbol
		var qrSymbol string
		if o.Symbol != nil {
			qrSymbol = *o.Symbol
		}
		qSymbol := qrSymbol
		if qSymbol != "" {
			if err := r.SetQueryParam("symbol", qSymbol); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
